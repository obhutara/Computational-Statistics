}
lambdasteps<-seq(0.1,40,0.1)
mypars<-list(X=train$Day,Y=train$LMR,Xtest=test$Day,Ytest=test$LMR)
mses<-length(lambdasteps)
for(i in lambdasteps){
mses[which(i==lambdasteps)]<- myMSE(i,mypars)
}
optimal_step<-lambdasteps[which.min(mses)]
optimal_mse<-min(mses)
plot(x=lambdasteps,y=mses,main="MSE vs lambda",col=ifelse(lambdasteps==optimal_step,"red","blue"))
is.factor(mortalityrate$LMR)
#pars<-list(X,Y,Xtest,Ytest)
myMSE <- function(lambda, pars, iterCounter = FALSE){
model<- loess(pars$Y ~ pars$X, enp.target = lambda)
pred<- predict(model, newdata = pars$Xtest)
MSE <- (1/length(pars$Ytest))*sum((pars$Ytest - pred)^2)
return(MSE)
}
lambdasteps<-seq(0.1,40,0.1)
mypars<-list(X=train$Day,Y=train$LMR,Xtest=test$Day,Ytest=test$LMR)
mses<-length(lambdasteps)
for(i in lambdasteps){
mses[which(i==lambdasteps)]<- myMSE(i,mypars)
}
optimal_step<-lambdasteps[which.min(mses)]
optimal_mse<-min(mses)
plot(x=lambdasteps,y=mses,main="MSE vs lambda",col=ifelse(lambdasteps==optimal_step,"red","blue"))
#pars<-list(X,Y,Xtest,Ytest)
myMSE <- function(lambda, pars, iterCounter = FALSE){
model<- loess(pars$Y ~ pars$X, enp.target = lambda)
pred<- predict(model, newdata = pars$Xtest,na.action=FALSE)
MSE <- (1/length(pars$Ytest))*sum((pars$Ytest - pred)^2)
# If we want a iteration counter
if(iterCounter){
if(!exists("iterForMyMSE")){
# Control if the variable exists in the global environemnt,
# if not, create a variable and set the value to 1. This
# would be the case for the first iteration
# We will call the variable 'iterForMyMSE'
assign("iterForMyMSE",value = 1,globalenv())}
else {
# This part is for the 2nd and the subsequent iterations.
# Starting of with obtaining the current iteration number
# and then overwrite the current value by the incremental
# increase of the current value
currentNr <- get("iterForMyMSE")
assign("iterForMyMSE",value = currentNr + 1,globalenv())
}
}
return(MSE)
}
lambdasteps<-seq(0.1,40,0.1)
mypars<-list(X=train$Day,Y=train$LMR,Xtest=test$Day,Ytest=test$LMR)
mses<-length(lambdasteps)
for(i in lambdasteps){
mses[which(i==lambdasteps)]<- myMSE(i,mypars)
}
optimal_step<-lambdasteps[which.min(mses)]
optimal_mse<-min(mses)
plot(x=lambdasteps,y=mses,main="MSE vs lambda",col=ifelse(lambdasteps==optimal_step,"red","blue"))
head(test)
head(train)
summary(test)
str(test)
str(train)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(plotly)
library(ggplot2)
library(xlsx)
library(readxl)
library(boot)
library(kableExtra)
library(knitr)
library(testthat)
mortalityrate = read.csv2("mortality_rate.csv")
mortalityrate$LMR<-log(mortalityrate$Rate)
n=dim(mortalityrate)[1]
set.seed(12345)
id=sample(1:n, floor(n*0.5))
train=mortalityrate[id,]
test=mortalityrate[-id,]
#pars<-list(X,Y,Xtest,Ytest)
myMSE <- function(lambda, pars, iterCounter = FALSE){
model<- loess(pars$Y ~ pars$X, enp.target = lambda)
pred<- predict(model, newdata = pars$Xtest)
MSE <- (1/length(pars$Ytest))*sum((pars$Ytest - pred)^2)
# If we want a iteration counter
if(iterCounter){
if(!exists("iterForMyMSE")){
# Control if the variable exists in the global environemnt,
# if not, create a variable and set the value to 1. This
# would be the case for the first iteration
# We will call the variable 'iterForMyMSE'
assign("iterForMyMSE",value = 1,globalenv())}
else {
# This part is for the 2nd and the subsequent iterations.
# Starting of with obtaining the current iteration number
# and then overwrite the current value by the incremental
# increase of the current value
currentNr <- get("iterForMyMSE")
assign("iterForMyMSE",value = currentNr + 1,globalenv())
}
}
return(MSE)
}
lambdasteps<-seq(0.1,40,0.1)
mypars<-list(X=train$Day,Y=train$LMR,Xtest=test$Day,Ytest=test$LMR)
mses<-length(lambdasteps)
for(i in lambdasteps){
mses[which(i==lambdasteps)]<- myMSE(i,mypars)
}
optimal_step<-lambdasteps[which.min(mses)]
optimal_mse<-min(mses)
plot(x=lambdasteps,y=mses,main="MSE vs lambda",col=ifelse(lambdasteps==optimal_step,"red","blue"))
#pars<-list(X,Y,Xtest,Ytest)
myMSE <- function(lambda, pars, iterCounter = FALSE){
model<- loess(pars$Y ~ pars$X, enp.target = lambda)
pred<- predict(model, newdata = pars$Xtest,na.action=na.pass)
MSE <- (1/length(pars$Ytest))*sum((pars$Ytest - pred)^2)
# If we want a iteration counter
if(iterCounter){
if(!exists("iterForMyMSE")){
# Control if the variable exists in the global environemnt,
# if not, create a variable and set the value to 1. This
# would be the case for the first iteration
# We will call the variable 'iterForMyMSE'
assign("iterForMyMSE",value = 1,globalenv())}
else {
# This part is for the 2nd and the subsequent iterations.
# Starting of with obtaining the current iteration number
# and then overwrite the current value by the incremental
# increase of the current value
currentNr <- get("iterForMyMSE")
assign("iterForMyMSE",value = currentNr + 1,globalenv())
}
}
return(MSE)
}
lambdasteps<-seq(0.1,40,0.1)
mypars<-list(X=train$Day,Y=train$LMR,Xtest=test$Day,Ytest=test$LMR)
mses<-length(lambdasteps)
for(i in lambdasteps){
mses[which(i==lambdasteps)]<- myMSE(i,mypars)
}
optimal_step<-lambdasteps[which.min(mses)]
optimal_mse<-min(mses)
plot(x=lambdasteps,y=mses,main="MSE vs lambda",col=ifelse(lambdasteps==optimal_step,"red","blue"))
#pars<-list(X,Y,Xtest,Ytest)
myMSE <- function(lambda, pars, iterCounter = FALSE){
model<- loess(pars$Y ~ pars$X, enp.target = lambda)
pred<- predict(model, newdata = pars$Xtest)
MSE <- (1/length(pars$Ytest))*sum((pars$Ytest - pred)^2)
# If we want a iteration counter
if(iterCounter){
if(!exists("iterForMyMSE")){
# Control if the variable exists in the global environemnt,
# if not, create a variable and set the value to 1. This
# would be the case for the first iteration
# We will call the variable 'iterForMyMSE'
assign("iterForMyMSE",value = 1,globalenv())}
else {
# This part is for the 2nd and the subsequent iterations.
# Starting of with obtaining the current iteration number
# and then overwrite the current value by the incremental
# increase of the current value
currentNr <- get("iterForMyMSE")
assign("iterForMyMSE",value = currentNr + 1,globalenv())
}
}
return(MSE)
}
lambdasteps<-seq(0.1,40,0.1)
mypars<-list(X=train$Day,Y=train$LMR,Xtest=test$Day,Ytest=test$LMR)
mses<-double(length(lambdasteps))
for(i in lambdasteps){
mses[which(i==lambdasteps)]<- myMSE(i,mypars)
}
optimal_step<-lambdasteps[which.min(mses)]
optimal_mse<-min(mses)
plot(x=lambdasteps,y=mses,main="MSE vs lambda",col=ifelse(lambdasteps==optimal_step,"red","blue"))
library(dplyr)
library(plotly)
library(ggplot2)
library(xlsx)
library(readxl)
library(kableExtra)
library(knitr)
mortalityrate = read.csv2("mortality_rate.csv")
mortalityrate$LMR<-log(mortalityrate$Rate)
n=dim(mortalityrate)[1]
set.seed(12345)
id=sample(1:n, floor(n*0.5))
train=mortalityrate[id,]
test=mortalityrate[-id,]
#pars<-list(X,Y,Xtest,Ytest)
myMSE <- function(lambda, pars, iterCounter = FALSE){
model<- loess(pars$Y ~ pars$X, enp.target = lambda)
pred<- predict(model, newdata = pars$Xtest)
MSE <- (1/length(pars$Ytest))*sum((pars$Ytest - pred)^2)
# If we want a iteration counter
if(iterCounter){
if(!exists("iterForMyMSE")){
# Control if the variable exists in the global environemnt,
# if not, create a variable and set the value to 1. This
# would be the case for the first iteration
# We will call the variable 'iterForMyMSE'
assign("iterForMyMSE",value = 1,globalenv())}
else {
# This part is for the 2nd and the subsequent iterations.
# Starting of with obtaining the current iteration number
# and then overwrite the current value by the incremental
# increase of the current value
currentNr <- get("iterForMyMSE")
assign("iterForMyMSE",value = currentNr + 1,globalenv())
}
}
return(MSE)
}
lambdasteps<-seq(0.1,40,0.1)
mypars<-list(X=train$Day,Y=train$LMR,Xtest=test$Day,Ytest=test$LMR)
mses<-double(length(lambdasteps))
for(i in lambdasteps){
mses[which(i==lambdasteps)]<- myMSE(i,mypars)
}
optimal_step<-lambdasteps[which.min(mses)]
optimal_mse<-min(mses)
plot(x=lambdasteps,y=mses,main="MSE vs lambda",col=ifelse(lambdasteps==optimal_step,"red","blue"))
#pars<-list(X,Y,Xtest,Ytest)
myMSE <- function(lambda, pars, iterCounter = FALSE){
model<- loess(pars[[2]] ~ pars[[1]], enp.target = lambda)
pred<- predict(model, newdata = pars$Xtest)
MSE <- (1/length(pars[[4]]))*sum((pars[[4]] - pred)^2)
# If we want a iteration counter
if(iterCounter){
if(!exists("iterForMyMSE")){
# Control if the variable exists in the global environemnt,
# if not, create a variable and set the value to 1. This
# would be the case for the first iteration
# We will call the variable 'iterForMyMSE'
assign("iterForMyMSE",value = 1,globalenv())}
else {
# This part is for the 2nd and the subsequent iterations.
# Starting of with obtaining the current iteration number
# and then overwrite the current value by the incremental
# increase of the current value
currentNr <- get("iterForMyMSE")
assign("iterForMyMSE",value = currentNr + 1,globalenv())
}
}
return(MSE)
}
lambdasteps<-seq(0.1,40,0.1)
mypars<-list(X=train$Day,Y=train$LMR,Xtest=test$Day,Ytest=test$LMR)
mses<-double(length(lambdasteps))
for(i in lambdasteps){
mses[which(i==lambdasteps)]<- myMSE(i,mypars)
}
optimal_step<-lambdasteps[which.min(mses)]
optimal_mse<-min(mses)
plot(x=lambdasteps,y=mses,main="MSE vs lambda",col=ifelse(lambdasteps==optimal_step,"red","blue"))
train$Day
X
mypars
head(mypars)
#pars<-list(X,Y,Xtest,Ytest)
myMSE <- function(lambda, pars, iterCounter = FALSE){
model<- loess(pars[[2]] ~ pars[[1]], enp.target = lambda)
pred<- predict(model, newdata = pars[[3]])
MSE <- (1/length(pars[[4]]))*sum((pars[[4]] - pred)^2)
# If we want a iteration counter
if(iterCounter){
if(!exists("iterForMyMSE")){
# Control if the variable exists in the global environemnt,
# if not, create a variable and set the value to 1. This
# would be the case for the first iteration
# We will call the variable 'iterForMyMSE'
assign("iterForMyMSE",value = 1,globalenv())}
else {
# This part is for the 2nd and the subsequent iterations.
# Starting of with obtaining the current iteration number
# and then overwrite the current value by the incremental
# increase of the current value
currentNr <- get("iterForMyMSE")
assign("iterForMyMSE",value = currentNr + 1,globalenv())
}
}
return(MSE)
}
lambdasteps<-seq(0.1,40,0.1)
mypars<-list(X=train$Day,Y=train$LMR,Xtest=test$Day,Ytest=test$LMR)
mses<-double(length(lambdasteps))
for(i in lambdasteps){
mses[which(i==lambdasteps)]<- myMSE(i,mypars)
}
optimal_step<-lambdasteps[which.min(mses)]
optimal_mse<-min(mses)
plot(x=lambdasteps,y=mses,main="MSE vs lambda",col=ifelse(lambdasteps==optimal_step,"red","blue"))
options(digits=22)
1/3
print(1/3)
print(1/3,digits = 22)
mypars
str(mypars)
knitr::opts_chunk$set(echo = TRUE)
derivative<-function(x){
f<-function(x){
return(x)
}
epsilion<-10^-15
x<-(f(x+epsilion)-f(x))/epsilion
return(x)
}
derivative(x=1)
derivative(x=100000)
derivative<-function(x){
f<-function(x){
return(x)
}
epsilion<-10^-15
der<-(f(x+epsilion)-f(x))/epsilion
return(der)
}
derivative(x=1)
derivative(x=100000)
myvar<-function(x){
n=length(x)
a=0
b=0
for (i in 1:n){
var<-a+(1/(n-1))*(sum(x^2)-((1/n)*sum(x)^2))
}
}
myvar(x=c(1,2,3,4,5))
myvar<-function(x){
n=length(x)
a=0
b=0
for (i in 1:n){
var<-a+(1/(n-1))*(sum(x^2)-((1/n)*sum(x)^2))
}
return(var)
}
myvar(x=c(1,2,3,4,5))
?Random
x<-c(1:10)
myvar<-function(x){
n=length(x)
a=0
b=0
for (i in 1:n){
var<-a+(1/(n-1))*(sum(x^2)-((1/n)*sum(x)^2))
}
return(var)
}
#x<-c(1:10)
randomno<-rnorm(n=10000,mean=10^8,sd=1)
myvar<-function(x){
n=length(x)
a=0
b=0
for (i in 1:n){
var<-a+(1/(n-1))*(sum(x^2)-((1/n)*sum(x)^2))
}
return(var)
}
#x<-c(1:10)
myvar(x)
randomno<-rnorm(n=10000,mean=10^8,sd=1)
Y <- vector(mode = "numeric", length = length(randomno))
v2 <- vector(mode = "numeric", length = length(randomno)+1)
Xi = randomno[1:i]
myvar<-function(x){
n=length(x)
a=0
b=0
for (i in 1:n){
var<-a+(1/(n-1))*(sum(x^2)-((1/n)*sum(x)^2))
}
return(var)
}
#x<-c(1:10)
myvar(x)
randomno<-rnorm(n=10000,mean=10^8,sd=1)
Y <- vector(mode = "numeric", length = length(randomno))
v2 <- vector(mode = "numeric", length = length(randomno)+1)
for(i in 1:length(randomno)){
options(digits = 22)
Xi = randomno[1:i]
Y = myvar(Xi) - var(Xi)
temp <- cbind(i, Y)
v2 <- rbind(temp, v2)
}
my_mat <- as.data.frame(v2)
library(ggplot2)
ggplot(v2, aes(x=i, y=Y)) + geom_point() + ggtitle("Plot of Y vs. i")
v2
myvar<-function(x){
n=length(x)
a=0
b=0
for (i in 1:n){
var<-a+(1/(n-1))*(sum(x^2)-((1/n)*sum(x)^2))
}
return(var)
}
#x<-c(1:10)
myvar(x)
randomno<-rnorm(n=10000,mean=10^8,sd=1)
Y <- vector(mode = "numeric", length = length(randomno))
v2 <- vector(mode = "numeric", length = length(randomno)+1)
for(i in 1:length(randomno)){
options(digits = 22)
Xi = randomno[1:i]
Y = myvar(Xi) - var(Xi)
temp <- cbind(i, Y)
v2 <- rbind(temp, v2)
}
myvar<-function(x){
n=length(x)
a=0
b=0
for (i in 1:n){
var<-a+(1/(n-1))*(sum(x^2)-((1/n)*sum(x)^2))
}
return(var)
}
randomno<-rnorm(n=10000,mean=10^8,sd=1)
Y <- vector(mode = "numeric", length = length(randomno))
v2 <- vector(mode = "numeric", length = length(randomno)+1)
for(i in 1:length(randomno)){
options(digits = 22)
Xi = randomno[1:i]
Y = myvar(Xi) - var(Xi)
temp <- cbind(i, Y)
v2 <- rbind(temp, v2)
}
v2
library(dplyr)
library(plotly)
library(ggplot2)
library(xlsx)
library(readxl)
library(boot)
library(kableExtra)
library(knitr)
library(testthat)
ggplot(v2, aes(x=i, y=Y)) + geom_point() + ggtitle("Plot of Y vs. i")
v2<-as.dataframe(v2)
myvar<-function(x){
n=length(x)
a=0
b=0
for (i in 1:n){
var<-a+(1/(n-1))*(sum(x^2)-((1/n)*sum(x)^2))
}
return(var)
}
randomno<-rnorm(n=10000,mean=10^8,sd=1)
Y <- vector(mode = "numeric", length = length(randomno))
v2 <- vector(mode = "numeric", length = length(randomno)+1)
for(i in 1:length(randomno)){
options(digits = 22)
Xi = randomno[1:i]
Y = myvar(Xi) - var(Xi)
temp <- cbind(i, Y)
v2 <- rbind(temp, v2)
}
v2<-as.data.frame(v2)
ggplot(v2, aes(x=i, y=Y)) + geom_point() + ggtitle("Plot of Y vs. i")
v2
library(ggplot)
library(ggplot2)
png("abc", type="cairo")
myvar<-function(x){
n=length(x)
a=0
b=0
for (i in 1:n){
var<-a+(1/(n-1))*(sum(x^2)-((1/n)*sum(x)^2))
}
return(var)
}
randomno<-rnorm(n=10000,mean=10^8,sd=1)
Y <- vector(mode = "numeric", length = length(randomno))
v2 <- vector(mode = "numeric", length = length(randomno)+1)
for(i in 1:length(randomno)){
options(digits = 22)
Xi = randomno[1:i]
Y = myvar(Xi) - var(Xi)
temp <- cbind(i, Y)
v2 <- rbind(temp, v2)
}
myvar<-function(x){
n=length(x)
a=0
b=0
for (i in 1:n){
var<-a+(1/(n-1))*(sum(x^2)-((1/n)*sum(x)^2))
}
return(var)
}
randomno<-rnorm(n=10000,mean=10^8,sd=1)
Y <- vector(mode = "numeric", length = length(randomno))
v2 <- vector(mode = "numeric", length = length(randomno)+1)
for(i in 1:length(randomno)){
options(digits = 22)
Xi = randomno[1:i]
Y = myvar(Xi) - var(Xi)
temp <- cbind(i, Y)
v2 <- rbind(temp, v2)
}
