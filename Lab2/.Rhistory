if(iterCounter){
if(!exists("iterForMyMSE")){
# Control if the variable exists in the global environemnt,
# if not, create a variable and set the value to 1. This
# would be the case for the first iteration
# We will call the variable 'iterForMyMSE'
assign("iterForMyMSE",value = 1,globalenv())}
else {
# This part is for the 2nd and the subsequent iterations.
# Starting of with obtaining the current iteration number
# and then overwrite the current value by the incremental
# increase of the current value
currentNr <- get("iterForMyMSE")
assign("iterForMyMSE",
value = currentNr + 1,
globalenv())
}
}
return(MSE)
}
lambdasteps<-seq(0.1,40,0.1)
mypars<-list(X=train$Day,Y=train$LMR,Xtest=test$Day,Ytest=test$LMR)
mses<-double(length(lambdasteps))
for(i in lambdasteps){
mses[which(i==lambdasteps)]<- myMSE(i,mypars)
}
View(train)
#pars<-list(X,Y,Xtest,Ytest)
myMSE <- function(lambda,mypars, iterCounter = FALSE){
model<- loess(Y ~ X, enp.target = lambda)
pred<- predict(model_temp, newdata = Xtest)
MSE <- (1/length(pred))*sum((Ytest - pred)^2)
# If we want a iteration counter
if(iterCounter){
if(!exists("iterForMyMSE")){
# Control if the variable exists in the global environemnt,
# if not, create a variable and set the value to 1. This
# would be the case for the first iteration
# We will call the variable 'iterForMyMSE'
assign("iterForMyMSE",value = 1,globalenv())}
else {
# This part is for the 2nd and the subsequent iterations.
# Starting of with obtaining the current iteration number
# and then overwrite the current value by the incremental
# increase of the current value
currentNr <- get("iterForMyMSE")
assign("iterForMyMSE",
value = currentNr + 1,
globalenv())
}
}
return(MSE)
}
lambdasteps<-seq(0.1,40,0.1)
mypars<-list(X=train$Day,Y=train$LMR,Xtest=test$Day,Ytest=test$LMR)
mses<-double(length(lambdasteps))
for(i in lambdasteps){
mses[which(i==lambdasteps)]<- myMSE(i,mypars)
}
#pars<-list(X,Y,Xtest,Ytest)
myMSE <- function(lambda, mypars, iterCounter = FALSE){
model<- loess(mypars$Y ~ mypars$X, enp.target = lambda)
pred<- predict(model_temp, newdata = Xtest)
MSE <- (1/length(pred))*sum((Ytest - pred)^2)
# If we want a iteration counter
if(iterCounter){
if(!exists("iterForMyMSE")){
# Control if the variable exists in the global environemnt,
# if not, create a variable and set the value to 1. This
# would be the case for the first iteration
# We will call the variable 'iterForMyMSE'
assign("iterForMyMSE",value = 1,globalenv())}
else {
# This part is for the 2nd and the subsequent iterations.
# Starting of with obtaining the current iteration number
# and then overwrite the current value by the incremental
# increase of the current value
currentNr <- get("iterForMyMSE")
assign("iterForMyMSE",
value = currentNr + 1,
globalenv())
}
}
return(MSE)
}
lambdasteps<-seq(0.1,40,0.1)
mypars<-list(X=train$Day,Y=train$LMR,Xtest=test$Day,Ytest=test$LMR)
mses<-double(length(lambdasteps))
for(i in lambdasteps){
mses[which(i==lambdasteps)]<- myMSE(i,mypars)
}
#pars<-list(X,Y,Xtest,Ytest)
myMSE <- function(lambda, mypars, iterCounter = FALSE){
model<- loess(mypars$Y ~ mypars$X, enp.target = lambda)
pred<- predict(model, newdata = Xtest)
MSE <- (1/length(pred))*sum((Ytest - pred)^2)
# If we want a iteration counter
if(iterCounter){
if(!exists("iterForMyMSE")){
# Control if the variable exists in the global environemnt,
# if not, create a variable and set the value to 1. This
# would be the case for the first iteration
# We will call the variable 'iterForMyMSE'
assign("iterForMyMSE",value = 1,globalenv())}
else {
# This part is for the 2nd and the subsequent iterations.
# Starting of with obtaining the current iteration number
# and then overwrite the current value by the incremental
# increase of the current value
currentNr <- get("iterForMyMSE")
assign("iterForMyMSE",
value = currentNr + 1,
globalenv())
}
}
return(MSE)
}
lambdasteps<-seq(0.1,40,0.1)
mypars<-list(X=train$Day,Y=train$LMR,Xtest=test$Day,Ytest=test$LMR)
mses<-double(length(lambdasteps))
for(i in lambdasteps){
mses[which(i==lambdasteps)]<- myMSE(i,mypars)
}
#pars<-list(X,Y,Xtest,Ytest)
myMSE <- function(lambda, mypars, iterCounter = FALSE){
model<- loess(mypars$Y ~ mypars$X, enp.target = lambda)
pred<- predict(model, newdata = mypars$Xtest)
MSE <- (1/length(pred))*sum((Ytest - pred)^2)
# If we want a iteration counter
if(iterCounter){
if(!exists("iterForMyMSE")){
# Control if the variable exists in the global environemnt,
# if not, create a variable and set the value to 1. This
# would be the case for the first iteration
# We will call the variable 'iterForMyMSE'
assign("iterForMyMSE",value = 1,globalenv())}
else {
# This part is for the 2nd and the subsequent iterations.
# Starting of with obtaining the current iteration number
# and then overwrite the current value by the incremental
# increase of the current value
currentNr <- get("iterForMyMSE")
assign("iterForMyMSE",
value = currentNr + 1,
globalenv())
}
}
return(MSE)
}
lambdasteps<-seq(0.1,40,0.1)
mypars<-list(X=train$Day,Y=train$LMR,Xtest=test$Day,Ytest=test$LMR)
mses<-double(length(lambdasteps))
for(i in lambdasteps){
mses[which(i==lambdasteps)]<- myMSE(i,mypars)
}
#pars<-list(X,Y,Xtest,Ytest)
myMSE <- function(lambda, mypars, iterCounter = FALSE){
model<- loess(mypars$Y ~ mypars$X, enp.target = lambda)
pred<- predict(model, newdata = mypars$Xtest)
MSE <- (1/length(pred))*sum((mypars$Ytest - pred)^2)
# If we want a iteration counter
if(iterCounter){
if(!exists("iterForMyMSE")){
# Control if the variable exists in the global environemnt,
# if not, create a variable and set the value to 1. This
# would be the case for the first iteration
# We will call the variable 'iterForMyMSE'
assign("iterForMyMSE",value = 1,globalenv())}
else {
# This part is for the 2nd and the subsequent iterations.
# Starting of with obtaining the current iteration number
# and then overwrite the current value by the incremental
# increase of the current value
currentNr <- get("iterForMyMSE")
assign("iterForMyMSE",
value = currentNr + 1,
globalenv())
}
}
return(MSE)
}
lambdasteps<-seq(0.1,40,0.1)
mypars<-list(X=train$Day,Y=train$LMR,Xtest=test$Day,Ytest=test$LMR)
mses<-double(length(lambdasteps))
for(i in lambdasteps){
mses[which(i==lambdasteps)]<- myMSE(i,mypars)
}
optimal_step<-lambdasteps[which.min(mses)]
optimal_mse<-min(mses)
plot(lambdasteps,mses,main="MSE vs lambda",col=ifelse(lambdasteps==optimal_step,"red","blue"))
?plot
print(mses)
mses<-double(length(lambdasteps))
mse
mses
for(i in lambdasteps){
mses[which(i==lambdasteps)]<- myMSE(i,mypars)
}
?optimize
a<-myMSE(i,mypars)
rm(ls=a)
?seq
#pars<-list(X,Y,Xtest,Ytest)
myMSE <- function(lambda, mypars, iterCounter = TRUE){
model<- loess(mypars$Y ~ mypars$X, enp.target = lambda)
pred<- predict(model, newdata = mypars$Xtest)
MSE <- (1/length(pred))*sum((mypars$Ytest - pred)^2)
# If we want a iteration counter
if(iterCounter){
if(!exists("iterForMyMSE")){
# Control if the variable exists in the global environemnt,
# if not, create a variable and set the value to 1. This
# would be the case for the first iteration
# We will call the variable 'iterForMyMSE'
assign("iterForMyMSE",value = 1,globalenv())}
else {
# This part is for the 2nd and the subsequent iterations.
# Starting of with obtaining the current iteration number
# and then overwrite the current value by the incremental
# increase of the current value
currentNr <- get("iterForMyMSE")
assign("iterForMyMSE",value = currentNr + 1,globalenv())
}
}
return(MSE)
}
lambdasteps<-seq(0.1,40,0.1)
mypars<-list(X=train$Day,Y=train$LMR,Xtest=test$Day,Ytest=test$LMR)
mses<-double(length(lambdasteps))
for(i in lambdasteps){
mses[which(i==lambdasteps)]<- myMSE(i,mypars)
}
optimal_step<-lambdasteps[which.min(mses)]
optimal_mse<-min(mses)
plot(x=lambdasteps,y=mses,main="MSE vs lambda",col=ifelse(lambdasteps==optimal_step,"red","blue"))
mse
mses
#pars<-list(X,Y,Xtest,Ytest)
myMSE <- function(lambda, mypars, iterCounter = TRUE){
model<- loess(mypars$Y ~ mypars$X, enp.target = lambda)
pred<- predict(model, newdata = mypars$Xtest)
MSE <- (1/length(pred))*sum((mypars$Ytest - pred)^2)
# If we want a iteration counter
if(iterCounter){
if(!exists("iterForMyMSE")){
# Control if the variable exists in the global environemnt,
# if not, create a variable and set the value to 1. This
# would be the case for the first iteration
# We will call the variable 'iterForMyMSE'
assign("iterForMyMSE",value = 1,globalenv())}
else {
# This part is for the 2nd and the subsequent iterations.
# Starting of with obtaining the current iteration number
# and then overwrite the current value by the incremental
# increase of the current value
currentNr <- get("iterForMyMSE")
assign("iterForMyMSE",value = currentNr + 1,globalenv())
}
}
return(MSE)
}
lambdasteps<-seq(0.1,40,0.1)
mypars<-list(X=train$Day,Y=train$LMR,Xtest=test$Day,Ytest=test$LMR)
mses<-length(lambdasteps)
for(i in lambdasteps){
mses[which(i==lambdasteps)]<- myMSE(i,mypars)
}
optimal_step<-lambdasteps[which.min(mses)]
optimal_mse<-min(mses)
plot(x=lambdasteps,y=mses,main="MSE vs lambda",col=ifelse(lambdasteps==optimal_step,"red","blue"))
mses<-length(lambdasteps)
myMSE(1,mypars)
View(train)
?predict.loess
#pars<-list(X,Y,Xtest,Ytest)
myMSE <- function(lambda, mypars, iterCounter = FALSE){
model<- loess(mypars$Y ~ mypars$X, enp.target = lambda)
pred<- predict(model, newdata = mypars$Xtest)
MSE <- (1/length(mypars$Ytest))*sum((mypars$Ytest - pred)^2)
# If we want a iteration counter
if(iterCounter){
if(!exists("iterForMyMSE")){
# Control if the variable exists in the global environemnt,
# if not, create a variable and set the value to 1. This
# would be the case for the first iteration
# We will call the variable 'iterForMyMSE'
assign("iterForMyMSE",value = 1,globalenv())}
else {
# This part is for the 2nd and the subsequent iterations.
# Starting of with obtaining the current iteration number
# and then overwrite the current value by the incremental
# increase of the current value
currentNr <- get("iterForMyMSE")
assign("iterForMyMSE",value = currentNr + 1,globalenv())
}
}
return(MSE)
}
lambdasteps<-seq(0.1,40,0.1)
mypars<-list(X=train$Day,Y=train$LMR,Xtest=test$Day,Ytest=test$LMR)
mses<-length(lambdasteps)
for(i in lambdasteps){
mses[which(i==lambdasteps)]<- myMSE(i,mypars)
}
optimal_step<-lambdasteps[which.min(mses)]
optimal_mse<-min(mses)
plot(x=lambdasteps,y=mses,main="MSE vs lambda",col=ifelse(lambdasteps==optimal_step,"red","blue"))
#pars<-list(X,Y,Xtest,Ytest)
myMSE <- function(lambda, parameters, iterCounter = FALSE){
model<- loess(parameters$Y ~ parameters$X, enp.target = lambda)
pred<- predict(model, newdata = parameters$Xtest)
MSE <- (1/length(parameters$Ytest))*sum((parameters$Ytest - pred)^2)
# If we want a iteration counter
if(iterCounter){
if(!exists("iterForMyMSE")){
# Control if the variable exists in the global environemnt,
# if not, create a variable and set the value to 1. This
# would be the case for the first iteration
# We will call the variable 'iterForMyMSE'
assign("iterForMyMSE",value = 1,globalenv())}
else {
# This part is for the 2nd and the subsequent iterations.
# Starting of with obtaining the current iteration number
# and then overwrite the current value by the incremental
# increase of the current value
currentNr <- get("iterForMyMSE")
assign("iterForMyMSE",value = currentNr + 1,globalenv())
}
}
return(MSE)
}
lambdasteps<-seq(0.1,40,0.1)
mypars<-list(X=train$Day,Y=train$LMR,Xtest=test$Day,Ytest=test$LMR)
mses<-length(lambdasteps)
for(i in lambdasteps){
mses[which(i==lambdasteps)]<- myMSE(i,mypars)
}
optimal_step<-lambdasteps[which.min(mses)]
optimal_mse<-min(mses)
plot(x=lambdasteps,y=mses,main="MSE vs lambda",col=ifelse(lambdasteps==optimal_step,"red","blue"))
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(plotly)
library(ggplot2)
library(xlsx)
library(readxl)
library(boot)
library(kableExtra)
library(knitr)
library(testthat)
mortalityrate = read.csv2("mortality_rate.csv")
mortalityrate$LMR<-log(mortalityrate$Rate)
n=dim(mortalityrate)[1]
set.seed(12345)
id=sample(1:n, floor(n*0.5))
train=mortalityrate[id,]
test=mortalityrate[-id,]
#pars<-list(X,Y,Xtest,Ytest)
myMSE <- function(lambda, pars, iterCounter = FALSE){
model<- loess(pars$Y ~ pars$X, enp.target = lambda)
pred<- predict(model, newdata = pars$Xtest)
MSE <- (1/length(pars$Ytest))*sum((pars$Ytest - pred)^2)
# If we want a iteration counter
if(iterCounter){
if(!exists("iterForMyMSE")){
# Control if the variable exists in the global environemnt,
# if not, create a variable and set the value to 1. This
# would be the case for the first iteration
# We will call the variable 'iterForMyMSE'
assign("iterForMyMSE",value = 1,globalenv())}
else {
# This part is for the 2nd and the subsequent iterations.
# Starting of with obtaining the current iteration number
# and then overwrite the current value by the incremental
# increase of the current value
currentNr <- get("iterForMyMSE")
assign("iterForMyMSE",value = currentNr + 1,globalenv())
}
}
return(MSE)
}
lambdasteps<-seq(0.1,40,0.1)
mypars<-list(X=train$Day,Y=train$LMR,Xtest=test$Day,Ytest=test$LMR)
mses<-length(lambdasteps)
for(i in lambdasteps){
mses[which(i==lambdasteps)]<- myMSE(i,mypars)
}
optimal_step<-lambdasteps[which.min(mses)]
optimal_mse<-min(mses)
plot(x=lambdasteps,y=mses,main="MSE vs lambda",col=ifelse(lambdasteps==optimal_step,"red","blue"))
#pars<-list(X,Y,Xtest,Ytest)
myMSE <- function(lambda, pars, iterCounter = FALSE){
model<- loess(pars$Y ~ pars$X, enp.target = lambda)
pred<- predict(model, newdata = pars$Xtest)
MSE <- sum((pars$Ytest - pred)^2)/length(pars$Ytest)
# If we want a iteration counter
if(iterCounter){
if(!exists("iterForMyMSE")){
# Control if the variable exists in the global environemnt,
# if not, create a variable and set the value to 1. This
# would be the case for the first iteration
# We will call the variable 'iterForMyMSE'
assign("iterForMyMSE",value = 1,globalenv())}
else {
# This part is for the 2nd and the subsequent iterations.
# Starting of with obtaining the current iteration number
# and then overwrite the current value by the incremental
# increase of the current value
currentNr <- get("iterForMyMSE")
assign("iterForMyMSE",value = currentNr + 1,globalenv())
}
}
return(MSE)
}
lambdasteps<-seq(0.1,40,0.1)
mypars<-list(X=train$Day,Y=train$LMR,Xtest=test$Day,Ytest=test$LMR)
mses<-length(lambdasteps)
for(i in lambdasteps){
mses[which(i==lambdasteps)]<- myMSE(i,mypars)
}
optimal_step<-lambdasteps[which.min(mses)]
optimal_mse<-min(mses)
plot(x=lambdasteps,y=mses,main="MSE vs lambda",col=ifelse(lambdasteps==optimal_step,"red","blue"))
myMSE(1,mypars)
#pars<-list(X,Y,Xtest,Ytest)
myMSE <- function(lambda, pars, iterCounter = FALSE){
model<- loess(pars$Y ~ pars$X, enp.target = lambda)
pred<- predict(model, newdata = pars$Xtest)
MSE <- (1/length(pars$Ytest))*sum((pars$Ytest - pred)^2)
# If we want a iteration counter
if(iterCounter){
if(!exists("iterForMyMSE")){
# Control if the variable exists in the global environemnt,
# if not, create a variable and set the value to 1. This
# would be the case for the first iteration
# We will call the variable 'iterForMyMSE'
assign("iterForMyMSE",value = 1,globalenv())}
else {
# This part is for the 2nd and the subsequent iterations.
# Starting of with obtaining the current iteration number
# and then overwrite the current value by the incremental
# increase of the current value
currentNr <- get("iterForMyMSE")
assign("iterForMyMSE",value = currentNr + 1,globalenv())
}
}
return(MSE)
}
lambdasteps<-seq(0.1,40,0.1)
mypars<-list(X=train$Day,Y=train$LMR,Xtest=test$Day,Ytest=test$LMR)
mses<-length(lambdasteps)
for(i in lambdasteps){
mses[which(i==lambdasteps)]<- myMSE(i,mypars)
}
optimal_step<-lambdasteps[which.min(mses)]
optimal_mse<-min(mses)
plot(x=lambdasteps,y=mses,main="MSE vs lambda",col=ifelse(lambdasteps==optimal_step,"red","blue"))
is.factor(mortalityrate$LMR)
#pars<-list(X,Y,Xtest,Ytest)
myMSE <- function(lambda, pars, iterCounter = FALSE){
model<- loess(pars$Y ~ pars$X, enp.target = lambda)
pred<- predict(model, newdata = pars$Xtest)
MSE <- (1/length(pars$Ytest))*sum((pars$Ytest - pred)^2)
return(MSE)
}
lambdasteps<-seq(0.1,40,0.1)
mypars<-list(X=train$Day,Y=train$LMR,Xtest=test$Day,Ytest=test$LMR)
mses<-length(lambdasteps)
for(i in lambdasteps){
mses[which(i==lambdasteps)]<- myMSE(i,mypars)
}
optimal_step<-lambdasteps[which.min(mses)]
optimal_mse<-min(mses)
plot(x=lambdasteps,y=mses,main="MSE vs lambda",col=ifelse(lambdasteps==optimal_step,"red","blue"))
#pars<-list(X,Y,Xtest,Ytest)
myMSE <- function(lambda, pars, iterCounter = FALSE){
model<- loess(pars$Y ~ pars$X, enp.target = lambda)
pred<- predict(model, newdata = pars$Xtest,na.action=FALSE)
MSE <- (1/length(pars$Ytest))*sum((pars$Ytest - pred)^2)
# If we want a iteration counter
if(iterCounter){
if(!exists("iterForMyMSE")){
# Control if the variable exists in the global environemnt,
# if not, create a variable and set the value to 1. This
# would be the case for the first iteration
# We will call the variable 'iterForMyMSE'
assign("iterForMyMSE",value = 1,globalenv())}
else {
# This part is for the 2nd and the subsequent iterations.
# Starting of with obtaining the current iteration number
# and then overwrite the current value by the incremental
# increase of the current value
currentNr <- get("iterForMyMSE")
assign("iterForMyMSE",value = currentNr + 1,globalenv())
}
}
return(MSE)
}
lambdasteps<-seq(0.1,40,0.1)
mypars<-list(X=train$Day,Y=train$LMR,Xtest=test$Day,Ytest=test$LMR)
mses<-length(lambdasteps)
for(i in lambdasteps){
mses[which(i==lambdasteps)]<- myMSE(i,mypars)
}
optimal_step<-lambdasteps[which.min(mses)]
optimal_mse<-min(mses)
plot(x=lambdasteps,y=mses,main="MSE vs lambda",col=ifelse(lambdasteps==optimal_step,"red","blue"))
head(test)
head(train)
summary(test)
str(test)
str(train)
